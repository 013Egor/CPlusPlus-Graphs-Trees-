#pragma once
#include "Edge.h"
/** \brief Очередь с приоритетом.
* Очередь с приоритетом, построенная на структуре данных пирамида(binary heap).
*/
class PriorityQueue {
	Edge* queue;
	int size;
	int capacity;
	int t;
public:
	///Конструктор
	PriorityQueue();
	///Деструктор
	~PriorityQueue();
	///Метод возвращающий индекс левого потомока
	/*!
	* \param i индекс текущей вершины
	* \return индекс левого потомока
	*/
	int left(int i) { return 2 * i + 1; }
	///Метод возвращающий индекс правого потомока
	/*!
	* \param i индекс текущей вершины
	* \return индекс правого потомока
	*/
	int right(int i) { return 2 * i + 2; }
	///Метод возвращающий индекс вершины-родителя
	/*!
	* \param i индекс текущей вершины
	* \return индекс вершины-родителя
	*/
	int parent(int i) { return (int)((i + 1) / 2 - 1); }
	///Метод для работы с элемнтами невозрастающей пирамиды
	void low_heapify(int);
	///Метод для создания неубывающей пирамиды
	void build_queue();
	///Метод для вставки элемента в очередь
	void insert(const Edge&);
	///Метод для получения элемента из очереди
	Edge pop();
	///Метод для смены мест двух элементов  
	void swap(int, int);
	///Метод, проверяющий на наличие элементов в очереди
	/*!
	* \return true - если очередь пуста, false - если есть элемнты
	*/
	bool empty() { return size <= 0; }
	///Метод, возвращающий количество элемнтов в очереди
	void set_size(int);
	void s();
};